wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
print("Clustering with " + k + "clusters")
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 15
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
print("Clustering with " + str(k) + "clusters")
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 15
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
print("Clustering with " , str(k) , "clusters")
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 15
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
sprintf("Clustering with  %d clusters",k)
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#bebe00')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 15
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
sprintf("Clustering with  %d clusters",k)
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#caca00')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 15
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
sprintf("Clustering with  %d clusters",k)
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#cacabe')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 15
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
sprintf("Clustering with  %d clusters",k)
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#cacabe')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 3
print(dim(mydata))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
sprintf("Clustering with  %d clusters",k)
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
require(ViewSOM.R)
load(ViewSOM.R)
source(ViewSOM.R)
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Install packages
list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
install.packages("kohonen")
install.packages("kohonen")
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
source('ViewSOM.R')
viewData(data)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",")
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = FALSE)
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
viewData(data_matrix)
data_matrix
head(data_matrix)
class(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Load the kohonen package
require(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
class(data_matrix)
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
library(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
library(kohonen)
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
source('ViewSOM.R')
viewData(data_matrix)
search()
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
library(kohonen)
source('ViewSOM.R')
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
viewData(data_matrix)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
library(kohonen)
source('ViewSOM.R')
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
attach(iris)
viewData(iris)
data <- as.data.frame(data)
viewData <- function(data, dummify=F, predict=T, log=F, clustering=F) {
## Libraries
require(kohonen)
require(caret)
require(RColorBrewer)
require(network)
require(deldir)
require(fields)
if(class(data) == "character") {
file <- data
data <- read.table(data, header=T, sep=";", na.strings="ND", dec=".")
}
if(class(data)=="matrix") {
data <- as.data.frame(data)
}
if(dummify) {
dummies <- dummyVars(~., data)
data <- as.data.frame(predict(dummies, data))
}
## Preprocess data accordingly
data <- data[,sapply(data, is.numeric)]
## Kohonen package does NOT accept NA's
data <- data[complete.cases(data),]
## Remove constant variables
data <- data[,apply(data, 2, function(x) if(sd(x)==0) F else T)]
if(log) {
data[,ncol(data)] <- log(data[,ncol(data)])
}
if(predict) {
## Separate in training and test sets
inTrain <- createDataPartition(y=data[,ncol(data)], p=0.7, list=F)
training <- data[inTrain,]
testing <- data[-inTrain,]
## Scales the testing and the training set based only on the training set
scaling <- preProcess(x=training)
data.scale <- predict(scaling, training)
testing <- predict(scaling, testing)
cat("Using ", ifelse(log, "log of ", ""), names(data)[ncol(data)], " as output.\n", sep="")
#Build supervised SOM
sqrt <- floor(sqrt(nrow(training)))
aGrid <- somgrid(xdim = sqrt, ydim = sqrt, topo="hexagonal")
som <- bdk(as.matrix(data.scale[,-c(ncol(data.scale))]), as.matrix(data.scale[,ncol(data.scale)]), grid=aGrid)
## Plots the predictions of the som on the testing set
predictions <- predict(som, as.matrix(testing))
unscaled.output <- ((testing[,ncol(training)] * scaling$std[ncol(training)]) +
scaling$mean[ncol(training)])
plot(unscaled.output, type="l", col="green", lwd=5,
main="Test predictions with SOM", ylab=names(training)[ncol(training)])
unscaled.predictions <- ((predictions$prediction * scaling$std[ncol(training)]) +
scaling$mean[ncol(training)])
points(unscaled.predictions, col="red", pch=19)
legend("bottomright", c("Real","Predicted"), col=c("green","red"),
lwd=5, lty=c(1,NA), pch=c(NA,19))
cat("Rsquared on the test set is :", R2(predictions$prediction, testing[,ncol(training)]))
} else {
## Scales all the data
scaling <- preProcess(x=data)
data.scale <- predict(scaling, data)
#Build unsupervised SOM
sqrt <- floor(sqrt(nrow(data)))
aGrid <- somgrid(xdim = sqrt, ydim = sqrt, topo="hexagonal")
som <- som(as.matrix(data.scale), grid=aGrid)
}
windows(width=16, height=9)
supplementary.graphs <- ifelse(clustering, 2, 1)
nb.plots.x <- ceiling(sqrt(ncol(data) + supplementary.graphs))
nb.plots.y <- nb.plots.x
while((nb.plots.x*nb.plots.y)-nb.plots.y >= ncol(data) + supplementary.graphs) {
nb.plots.y <- nb.plots.y - 1
}
par(mar=c(0.5,1,1.5,5), mfrow=c(nb.plots.x, nb.plots.y), pty="s")
## Plots the U-Matrix before unscaling
distances <- buildUMatrix(som, predict)
plotSOM(som, title="U-Matrix", palette="Greys", matrix=distances, type="Interval")
## Unscale SOM
if(predict) {
old.codes <- som$codes$X
data.unscale <- cbind(som$codes$X, som$codes$Y)
colnames(data.unscale)[ncol(data.unscale)] <- names(data)[ncol(data)]
} else {
old.codes <- som$codes
data.unscale <- som$codes
}
for(i in 1:ncol(data.unscale)) {
data.unscale[,i] <- ((data.unscale[,i] *
scaling$std[i]) +
scaling$mean[i])
}
som$codes <- data.unscale
## Plots the variables component planes
for(p in colnames(som$codes)) {
intensities <- matrix(nrow=som$grid$ydim, ncol=som$grid$xdim, data=som$codes[,p])
plotSOM(som, title=p, palette="Spectral", matrix=intensities, type="Quantile")
}
if(clustering) {
## Plots clusters according to pamk
require(fpc)
pamk <- pamk(dist(old.codes), krange = 1:10)
color.ramp <- rainbow(pamk$nc)
color.codes <- color.ramp[pamk$pamobject$clustering]
dummyPlot(som=som, "Clusters")
plotHexagons(som=som, color.codes)
image.plot(legend.only=TRUE, col=color.ramp, zlim=c(1, pamk$nc))
}
}
buildUMatrix <- function(som, predict) {
#CALCULATE U-MATRIX
## Delaunay Triangulation to form network of neurons
d <- deldir(x=som$grid$pts[,1], y=som$grid$pts[,2])
## Build network
n <- network(x=unique(d$delsgs[,5:6]), directed=FALSE, matrix.type="edgelist")
## Average eudlidean distance between each vertex and its neighbors
neigh.dists <- NA
for(vert in network.vertex.names(n)){
neighs <- get.neighborhood(x=n, v=vert)
if(predict) {
neigh.dists[vert] <- (sum(dist(som$codes$X[c(vert, neighs),][,1]))/length(neighs))
} else {
neigh.dists[vert] <- (sum(dist(som$codes[c(vert, neighs),][,1]))/length(neighs))
}
}
neigh.dists
}
plotSOM <- function(som, title, palette, matrix, type) {
## Creates empty plot with title and good dimensions
dummyPlot(som, title)
## Sets the correct color options
color.ramp <- rev(brewer.pal(9, palette))
if(type == "Interval") {
bins <- seq(min(matrix), max(matrix), length=length(color.ramp))
}
if(type == "Quantile") {
bins <- quantile(x=matrix, probs=cumsum(rep(1/length(color.ramp), length(color.ramp))), na.rm = T)
}
color.codes <- rep("#FFFFFF", length(vector)) #default is all white
for (i in 1:length(matrix))
if (!is.na(matrix[i])) color.codes[i] <- color.ramp[which.min(abs(bins-matrix[i]))]
## Actually plots the hexagonal som and the legend
plotHexagons(som, color.codes)
image.plot(legend.only=TRUE, col=color.ramp, zlim=c(min(matrix), max(matrix)))
}
dummyPlot <- function(som, title) {
plot(0, 0, type = "n", axes = FALSE, xlim=c(0, som$grid$xdim),
ylim=c(0, som$grid$ydim), xlab="", ylab= "", asp=1, main=substr(title, 1, 20))
}
plotHexagons <- function(som, color.codes) {
Hexagon <- function (x, y, unitcell = 1, col = "grey", border=NA) {
polygon(c(x, x, x + unitcell/2, x + unitcell, x + unitcell,
x + unitcell/2), c(y + unitcell * 0.125, y + unitcell *
0.875, y + unitcell * 1.125, y + unitcell * 0.875,
y + unitcell * 0.125, y - unitcell * 0.125),
col = col, border=border)
}
offset <- 0.5 #offset for the hexagons when moving up a row
ind <- 1
for (row in 1:som$grid$ydim) {
for (column in 0:(som$grid$xdim - 1)){
Hexagon(column + offset, row - 1, col = color.codes[ind])
ind <- ind +1
}
offset <- ifelse(offset, 0, 0.5)
}
}
viewData(iris)
sessionInfo()
getwd()
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
library(kohonen)
source('ViewSOM.R')
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
getwd()
attach(iris)
viewData(iris)
# Set the working directory
setwd("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/ViewSOM/")
library(kohonen)
source('ViewSOM.R')
# Install packages
#list.of.packages <- c("ggplot2", "Rcpp", "caret", "network", "deldir","fields")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages)
data = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv", header=T, sep=",", stringsAsFactors = TRUE)
data_matrix <- as.matrix(scale(data))
getwd()
attach(iris)
viewData(iris)
