keep.data = TRUE)
png(paste("All_Dist_neighbours.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model, type="dist.neighbours")
dev.off()
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#cacabe')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 5
print(dim(data))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
path <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/"
pathSOM <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/SOM/"
setwd(path)
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
setwd(pathSOM)
summary(data)
# Load the kohonen package
install.packages('kohonen')
require(kohonen)
## 75% of the sample size
#smp_size <- floor(0.75 * nrow(data))
## set the seed to make your partition reproductible
#set.seed(123)
#train_ind <- sample(seq_len(nrow(data)), size = smp_size)
#data_train <- data[train_ind, ]
#data_test <- data[-train_ind, ]
# Change the data frame with training data to a matrix
# Also center and scale all variables to give them equal importance during
# the SOM training process.
data_matrix <- as.matrix(scale(data))
#data_matrix_2011 <- as.matrix(scale(subset(data[,-which( names(data) %in% c("year","Cristalizado","Reposado"))], year==2011)))
data_matrix_2011 <- as.matrix(scale(subset(data, year==2011), scale=FALSE))
data_matrix_2016 <- as.matrix(scale(subset(data, year==2016), scale=FALSE))
# Create the SOM Grid - you generally have to specify the size of the
# training grid prior to training the SOM. Hexagonal and Circular
# topologies are possible
som_grid <- somgrid(xdim = 25, ydim=25, topo='hexagonal')
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(data_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
# Plotthe map
png(paste("All_Dist_neighbours.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model, type="dist.neighbours")
dev.off()
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#cacabe')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 5
print(dim(data))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(som_model$codes)), k)
#som.hc <- cutree(hclust(dist(sommap$codes[[1]])), groups)
# plot these results:
png(paste("2016_cluster.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
dev.off()
sprintf("Clustering with  %d clusters",k)
####################2011#######################
#
data_som <- data_matrix_2011
summary(data_som)
som_grid <- somgrid(xdim = 10, ydim=10, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
# Som Clusters
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
png(paste("2011_cluster.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
dev.off()
# Distances
png(paste("2011_distance.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="dist.neighbours")
dev.off()
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","PuntajeTotal","DefectosTotales","ASNM")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("2011_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
#plot(fit)
dev.off()
}
###################2016########################
#
data_som <- data_matrix_2016
som_grid <- somgrid(xdim = 10, ydim=10, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
# Som Clusters
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
# Distances
plot(som_model2, type="dist.neighbours")
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","pH_avg","org_avg","ASNM","PuntajeTotal","DefectosTotales")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("2016_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
dev.off()
}
#========================================================================================
# SOM avec dataset compact
setwd(path)
filename <- "df_compact_2_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
data <- data[complete.cases(data),]
setwd(pathSOM)
data_matrix <- as.matrix(scale(subset(data, select= -VARIEDAD)))
som_grid <- somgrid(xdim = 19, ydim=19, topo='hexagonal')
data_som <- data_matrix
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
# Som Clusters
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
# Saving the plots
png(paste("All_Compact_Clusters.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
dev.off()
# Distances
plot(som_model2, type="dist.neighbours")
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","pH_avg","org_avg","ASNM","Slope","Orientation","PuntajeTotal","DefectosTotales")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("All_Compact_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
dev.off()
}
print('End')
install.packages("kohonen")
path <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/"
pathSOM <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/SOM/"
setwd(path)
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
setwd(pathSOM)
summary(data)
data = subset(data, select=c(-SICA))
setwd(pathSOM)
summary(data)
install.packages('kohonen')
install.packages("kohonen")
data_matrix <- as.matrix(scale(data))
data_matrix_2011 <- as.matrix(scale(subset(data, year==2011), scale=FALSE))
data_matrix_2016 <- as.matrix(scale(subset(data, year==2016), scale=FALSE))
data = subset(data, select=c(-SICA, -year))
data = subset(data, select=c(-SICA -year))
data = read.csv(filename, header=T, sep=",")
path <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/"
pathSOM <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/SOM/"
setwd(path)
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
to.remove <- c("SICA","year")
`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(mtcars) %ni% to.remove)
setwd(pathSOM)
summary(data)
path <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/"
pathSOM <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/SOM/"
setwd(path)
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
to.remove <- c("SICA","year")
`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(data) %ni% to.remove)
setwd(pathSOM)
summary(data)
data_matrix <- as.matrix(scale(data))
data_matrix_2011 <- as.matrix(scale(subset(data, year==2011), scale=FALSE))
path <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/"
pathSOM <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/SOM/"
setwd(path)
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
to.remove <- c("SICA")
`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(data) %ni% to.remove)
setwd(pathSOM)
summary(data)
install.packages('kohonen')
install.packages("kohonen")
require(kohonen)
data_matrix <- as.matrix(scale(data))
data_matrix_2011 <- as.matrix(scale(subset(data, year==2011), scale=FALSE))
data_matrix_2016 <- as.matrix(scale(subset(data, year==2016), scale=FALSE))
som_grid <- somgrid(xdim = 25, ydim=25, topo='hexagonal')
som_model <- som(data_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
png(paste("All_Dist_neighbours.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model, type="dist.neighbours")
dev.off()
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#99000b', '#99FF00', '#FFFF44', '#00caca','#beef00','#00beef', '#cacabe')
coolBlueHotRed <- function(n, alpha = 1) { rainbow(n, end=4/6, alpha=alpha)[n:1] }
k = 5
print(dim(data))
wss <- (nrow(data_matrix)-1)*sum(apply(data_matrix,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(data_matrix, centers=i)$withinss)
}
plot(wss)
som_cluster <- cutree(hclust(dist(som_model$codes)), k)
png(paste("2016_cluster.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
dev.off()
sprintf("Clustering with  %d clusters",k)
data_som <- data_matrix_2011
summary(data_som)
som_grid <- somgrid(xdim = 10, ydim=10, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
png(paste("2011_cluster.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
dev.off()
png(paste("2011_distance.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="dist.neighbours")
dev.off()
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","PuntajeTotal","DefectosTotales","ASNM")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("2011_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
#plot(fit)
dev.off()
}
data_som <- data_matrix_2016
som_grid <- somgrid(xdim = 10, ydim=10, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
plot(som_model2, type="dist.neighbours")
data_som <- data_matrix_2016
som_grid <- somgrid(xdim = 25, ydim=25, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
png(paste("2016_cluster.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
dev.off()
plot(som_model2, type="dist.neighbours")
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","pH_avg","org_avg","ASNM","PuntajeTotal","DefectosTotales")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("2016_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
dev.off()
}
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
setwd(path)
filename <- "DataRisaralda_v2Numeric_Complete_utf-8.csv"
data = read.csv(filename, header=T, sep=",")
data <- data[complete.cases(data),]
setwd(pathSOM)
data_matrix <- as.matrix(scale(subset(data, select= -VARIEDAD)))
data_matrix <- as.matrix(scale(data))
som_grid <- somgrid(xdim = 19, ydim=19, topo='hexagonal')
data_som <- data_matrix
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
png(paste("All_Compact_Clusters.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
dev.off()
plot(som_model2, type="dist.neighbours")
png(paste("AllData_Distances.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="dist.neighbours")
dev.off()
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","pH_avg","org_avg","ASNM","Slope","Orientation","PuntajeTotal","DefectosTotales")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("All_Compact_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
dev.off()
}
som_grid <- somgrid(xdim = 25, ydim=25, topo='hexagonal')
data_som <- data_matrix
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
som_grid <- somgrid(xdim = 25, ydim=25, topo='hexagonal')
data_som <- data_matrix_2016
som_grid <- somgrid(xdim = 25, ydim=25, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
som_grid <- somgrid(xdim = 20, ydim=20, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
som_grid <- somgrid(xdim = 15, ydim=15, topo='hexagonal')
som_model2 <- som(data_som,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
k= 5
som_cluster <- cutree(hclust(dist(som_model2$codes)), k)
png(paste("2016_cluster.png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model2, som_cluster)
dev.off()
plot(som_model2, type="dist.neighbours")
variable = c("PrecTotalAvg","TminTotalAvg","TmaxTotalAvg","TmeanTotalAvg","DtrTotalAvg","pH_avg","org_avg","ASNM","PuntajeTotal","DefectosTotales")
for(var_str in variable) {
# get the index from the name
var <- grep(var_str, colnames(data_som))
var_unscaled <- aggregate(as.numeric(data_som[,var]), by=list(som_model2$unit.classif), FUN=mean, simplify=TRUE)[,2]
# Saving the plots
png(paste("2016_var_",var_str,".png"), width=4, height=4, units="in", res=300)
par(mar=c(4,4,1,1))
plot(som_model2, type = "property", property=var_unscaled, main=names(data)[var], palette.name=coolBlueHotRed)
dev.off()
}
load("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/All-Functions-AEPS_BD.RData")
dirFol <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/"
setwd(dirFol)
datNam <- "DataRisaralda_v2_R_Total_utf-8.csv"
dataSet   <- read.csv(datNam,row.names=1)
namsDataSet <- names(dataSet)
inputs  <- 1:74  #inputs columns
segme   <- 75   #split column
output  <- 76   #output column
contVariety <- table(dataSet[,segme])
variety0    <- names(sort(contVariety[contVariety>=5]))
if(length(variety0)==0){variety = variety0 }else{variety = factor(c(variety0,"All"))}
createFolders(dirFol,variety)
dataSetProces(variety,dataSet,segme,corRed="caret")
rm(list=ls())
require(gtools)
require(gridBase)
require(gridExtra)
require(relaimpo)
require(caret)
require(party)
require(randomForest)
require(snowfall)
require(earth)
require(agricolae)
require(cowplot)
require(reshape)
require(stringr)
require(gbm)
require(plyr)
load("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/All-Functions-AEPS_BD.RData")
dirFol <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/"
setwd(dirFol)
datNam <- "DataRisaralda_v2_R_Total_utf-8.csv"
dataSet   <- read.csv(datNam,row.names=1)
namsDataSet <- names(dataSet)
inputs  <- 1:74  #inputs columns
segme   <- 75   #split column
output  <- 76   #output column
contVariety <- table(dataSet[,segme])
variety0    <- names(sort(contVariety[contVariety>=5]))
if(length(variety0)==0){variety = variety0 }else{variety = factor(c(variety0,"All"))}
createFolders(dirFol,variety)
dataSetProces(variety,dataSet,segme,corRed="caret")
lineaRegresionFun(variety,dirLocation=paste0(getwd(),"/"),ylabs="Score (SCAA)")
contVariety <- table(dataSet[,segme])
variety0    <- names(sort(contVariety[contVariety>=30]))
if(length(variety0)==0){variety = variety0 }else{variety = factor(c(variety0,"All"))}
variety[1:3]
multilayerPerceptronFun(var,dirLocation=paste0(getwd(),"/"),nb.it=3,
ylabs="Score (SCAA)",pertuRelevance=T,ncores=3)
load("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/All-Functions-AEPS_BD.RData")
rm(list=ls())
require(gtools)
require(gridBase)
require(gridExtra)
require(relaimpo)
require(caret)
require(party)
require(randomForest)
require(snowfall)
require(earth)
require(agricolae)
require(cowplot)
require(reshape)
require(stringr)
require(gbm)
require(plyr)
load("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/All-Functions-AEPS_BD.RData")
dirFol <- "C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/R/Projects/BachelorThesis/"
setwd(dirFol)
datNam <- "DataRisaralda_v2_R_Total_utf-8.csv"
dataSet   <- read.csv(datNam,row.names=1)
namsDataSet <- names(dataSet)
inputs  <- 1:74  #inputs columns
segme   <- 75   #split column
output  <- 76   #output column
contVariety <- table(dataSet[,segme])
variety0    <- names(sort(contVariety[contVariety>=30]))
if(length(variety0)==0){variety = variety0 }else{variety = factor(c(variety0,"All"))}
createFolders(dirFol,variety)
for(var in variety){
descriptiveGraphics(var,dataSet,inputs = inputs,segme = segme,output = output,
smooth=F,ylabel = "Score (SCAA)",smoothInd = NULL,
ghrp="box",res=80)
}
dataSetProces(variety,dataSet,segme,corRed="caret")
lineaRegresionFun(variety,dirLocation=paste0(getwd(),"/"),ylabs="Score (SCAA)")
for(var in variety[1:3]){
multilayerPerceptronFun(var,dirLocation=paste0(getwd(),"/"),nb.it=3,
ylabs="Score (SCAA)",pertuRelevance=T,ncores=3)
}
randomForestFun("All",nb.it=30,ncores = 3,saveWS=F)
boostingFun("All",nb.it=30,ncores=3,saveWS=F)
boostingFun("All",nb.it=30,ncores=3,saveWS=F)
count
head(data)
dataSetProces(variety,dataSet,segme,corRed="caret")
for(var in variety[1:3]){
multilayerPerceptronFun(var,dirLocation=paste0(getwd(),"/"),nb.it=3,
ylabs="Score (SCAA)",pertuRelevance=T,ncores=3)
}
